# -*- coding: utf-8 -*-
"""Final Project - Percolation

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1IDShFJM1_x2mkePGl5EALaEY2P2X5U8Z
"""

import numpy as np
from matplotlib import pyplot as plt
from random import random

def createLattice(size, prob):     # size must be an integer, prob must be a float 0<prob<1
  lattice = np.zeros([size+1,size+1])
  #states = np.random.rand([size,size])
  for row in lattice:
    states = np.random.rand(size+1)
    row[(states<= prob)] = 1
    row[(states>prob)] = 0 
  return lattice

def showLattice(size,prob):
  lattice = createLattice(size,prob)
  clusters = np.zeros([size+1,size+1]) 
  n=1
  for i in range(size+1):
    for j in range(size+1):
      if lattice[i,j] ==1:
        clusters[i,j] = n
        n+=1
  plt.matshow(clusters, cmap='Blues')

showLattice(20,0.55)

def solveLattice(size,prob, plot = True):
  #size = size+1
  trial = size * 2
  soln = False
  lattice = createLattice(size,prob)
  clusters = np.zeros([size+1,size+1])                    
  clusters[0,lattice[0,:]==1] = 1
  n=1
  for i in range(size+1):
    for j in range(size+1):
      if lattice[i,j] ==1:
        clusters[i,j] = n
        n+=1
  for x in range(trial):
    for i in range(size+1):
      for j in range(size+1):
        if clusters[i,j] != 0:  # following series of if statements make sure that edges dont check spaces that dont exist
          if i==0 and j == 0:    #top left corner
            mx = np.max([clusters[i,j],clusters[i,j+1],clusters[i+1,j]])
            if mx != clusters[i,j]:
              clusters[i,j] = mx
          elif i == size and j == size:   # bottom right corner
            mx = np.max([clusters[i,j], clusters[i,j-1],clusters[i-1,j]])
            if mx != clusters[i,j]:
              clusters[i,j] = mx
          elif i==size and j==0:   # top right corner
            mx = np.max([clusters[i,j], clusters[i,j+1],clusters[i-1,j]])
            if mx != clusters[i,j]:
              clusters[i,j] = mx
          elif i == 0 and j == size:  # bottom left corner
            mx = np.max([clusters[i,j], clusters[i,j-1],clusters[i+1,j]])
            if mx != clusters[i,j]:
              clusters[i,j] = mx
          elif i == size:   # bottom side
            mx = np.max([clusters[i,j], clusters[i,j-1],clusters[i,j+1],clusters[i-1,j]])
            if mx != clusters[i,j]:
              clusters[i,j] = mx
          elif j==size:  # right side
            mx = np.max([clusters[i,j], clusters[i,j-1],clusters[i+1,j],clusters[i-1,j]])
            if mx != clusters[i,j]:
              clusters[i,j] = mx
          elif i==0:  # top side
            mx = np.max([clusters[i,j], clusters[i,j-1],clusters[i,j+1],clusters[i+1,j]])
            if mx != clusters[i,j]:
              clusters[i,j] = mx
          elif j==0:  # left side
            mx = np.max([clusters[i,j],clusters[i,j+1],clusters[i-1,j],clusters[i+1,j]])
            if mx != clusters[i,j]:
              clusters[i,j] = mx
          else:   # all remaining sites (not on edges)
            mx = np.max([clusters[i,j], clusters[i,j-1],clusters[i,j+1],clusters[i-1,j],clusters[i+1,j]])
            if mx != clusters[i,j]:
              #print('change!'+str(mx))
              clusters[i,j] = mx
  for item in clusters[size,:size]:
    #print(item)
    if item in clusters[0,:size] and item !=0:
      soln = True
      #print("solution possible")
  #plt.matshow(lattice[:size,:size],cmap = 'Reds')
  #plt.colorbar()
  if plot == True:
    plt.matshow(clusters, cmap='Blues')
    #plt.colorbar()
    plt.title(str(size)+' by '+str(size)+", "+str(prob*100)+'% Concentration')
  return soln

solveLattice(50,0.5)

def stats(size,prob,length):
  results = np.full(length,False)
  for i in range(len(results)):
    results[i] = solveLattice(size,prob,plot=False)
  out = np.sum(results) / length
  return(out)

stats(20,0.6,20)

def probStats(size,length=30,step=0.05):
  data = np.array([])
  probs = np.arange(0,1,step)
  for prob in probs:
    data = np.append(data, stats(size,prob,length))
  plt.plot(probs,data,label = 'Matrix Size ='+str(size))

probStats(10)
probStats(20)
probStats(30)
plt.xlabel('Probability of any single site being permeable')
plt.ylabel('Probability of electron passing')
plt.legend()

probStats(3,length = 100)
probStats(30,length = 100)
plt.xlabel('Probability of any single site being permeable')
plt.ylabel('Probability of electron passing')
plt.legend()

probStats(1,length = 400)
x = np.arange(0,2)
plt.plot(x,x,label = 'y = x')
plt.xlabel('Probability of any single site being permeable')
plt.ylabel('Probability of electron passing')
plt.legend()

